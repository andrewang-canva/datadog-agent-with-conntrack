---
# deps_build stage
# Contains jobs which build various libraries needed for system-probe.

.build_libbcc_common:
  rules:
    !reference [.manual]
  stage: deps_build
  script:
    - git clone -b "$BCC_VERSION" --depth=1 https://github.com/iovisor/bcc.git /tmp/bcc
    # Patch libbcc to remove references to glibc symbols with a too recent version
    - cd /tmp/bcc
    - patch -p1 < "$CI_PROJECT_DIR"/omnibus/config/software/libbcc_compat.patch
    - mkdir /tmp/bcc/build
    - cd /tmp/bcc/build
    - cmake .. -DENABLE_EXAMPLES=OFF -DENABLE_TESTS=OFF -DENABLE_MAN=OFF -DCMAKE_INSTALL_PREFIX=/opt/libbcc -DCMAKE_EXE_LINKER_FLAGS="-Wl,-rpath,$DATADOG_AGENT_EMBEDDED_PATH/lib" -DCMAKE_SHARED_LINKER_FLAGS="-Wl,-rpath,$DATADOG_AGENT_EMBEDDED_PATH/lib"
    - make -j 4 # "$(nproc)"
    # Check that libbcc has no references to glibc >= 2.18
    - objdump -p src/cc/libbcc.so | egrep 'GLIBC_2\.(1[8-9]|[2-9][0-9])' && exit 1
    - make install
    - cd /opt/libbcc
    - chmod go-rwx lib/libbcc*
    - rm -rf share/bcc/introspection share/bcc/tools lib/python2* lib/python3*
    - cp $(ldd lib/libbcc.so | awk '$1 ~ /^libtinfo/ {system("dirname " $3)}')/libtinfo.so.6* lib
    - mkdir -p $CI_PROJECT_DIR/.tmp
    - tar cvaf $CI_PROJECT_DIR/.tmp/libbcc-$ARCH-$BCC_VERSION.tar.xz .
    - $S3_CP_CMD $CI_PROJECT_DIR/.tmp/libbcc-$ARCH-$BCC_VERSION.tar.xz $S3_PERMANENT_ARTIFACTS_URI/libbcc-$ARCH-$BCC_VERSION.tar.xz
  artifacts:
    expire_in: 2 weeks
    paths:
      - $CI_PROJECT_DIR/.tmp/libbcc-$ARCH-$BCC_VERSION.tar.xz

build_libbcc_x64:
  extends: .build_libbcc_common
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/system-probe_x64:$DATADOG_AGENT_SYSPROBE_BUILDIMAGES
  tags: ["runner:main", "size:large"]
  variables:
    ARCH: amd64

build_libbcc_arm64:
  extends: .build_libbcc_common
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/system-probe_arm64:$DATADOG_AGENT_SYSPROBE_BUILDIMAGES
  tags: ["runner:docker-arm", "platform:arm64"]
  variables:
    ARCH: arm64

.build_clang_common:
  rules:
    !reference [.manual]
  stage: deps_build
  script:
    # use tmpdir to prevent git remote capture by clang build
    - mkdir /tmp/clangbuild && cd /tmp/clangbuild
    - wget https://github.com/llvm/llvm-project/releases/download/llvmorg-11.0.1/clang-11.0.1.src.tar.xz -O clang.src.tar.xz
    - wget https://github.com/llvm/llvm-project/releases/download/llvmorg-11.0.1/llvm-11.0.1.src.tar.xz -O llvm.src.tar.xz
    - mkdir clang && tar xf clang.src.tar.xz --strip-components=1 --no-same-owner -C clang
    - mkdir llvm && tar xf llvm.src.tar.xz --strip-components=1 --no-same-owner -C llvm
    - mkdir build && cd build
    - |
      cmake -DLLVM_ENABLE_PROJECTS=clang \
      -DLLVM_TARGETS_TO_BUILD="BPF" \
      -DCMAKE_INSTALL_PREFIX=$DATADOG_AGENT_EMBEDDED_PATH \
      -G "Ninja" \
      -DCMAKE_BUILD_TYPE=MinSizeRel \
      -DLLVM_BUILD_TOOLS=OFF \
      -DLLVM_ENABLE_TERMINFO=OFF \
      -DLLVM_INCLUDE_EXAMPLES=OFF \
      -DLLVM_INCLUDE_TESTS=OFF \
      -DLLVM_INCLUDE_BENCHMARKS=OFF \
      -DLLVM_STATIC_LINK_CXX_STDLIB=ON \
      -DLLVM_ENABLE_BINDINGS=OFF \
      -DLLVM_PARALLEL_COMPILE_JOBS=4 \
      -DLLVM_PARALLEL_LINK_JOBS=4 \
      ../llvm
    - cmake --build . --target install
    - cd $DATADOG_AGENT_EMBEDDED_PATH
    - rm -rf bin share libexec lib/clang lib/cmake lib/*.so*
    - mkdir -p $CI_PROJECT_DIR/.tmp
    - tar cvaf $CI_PROJECT_DIR/.tmp/clang-$ARCH-11.0.1.tar.xz .
    - $S3_CP_CMD $CI_PROJECT_DIR/.tmp/clang-$ARCH-11.0.1.tar.xz $S3_PERMANENT_ARTIFACTS_URI/clang-$ARCH-11.0.1.tar.xz
  timeout: 2h 00m
  artifacts:
    expire_in: 2 weeks
    paths:
      - $CI_PROJECT_DIR/.tmp/clang-$ARCH-11.0.1.tar.xz

build_clang_x64:
  extends: .build_clang_common
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/system-probe_x64:$DATADOG_AGENT_SYSPROBE_BUILDIMAGES
  tags: ["runner:main", "size:2xlarge"]
  variables:
    ARCH: amd64

build_clang_arm64:
  extends: .build_clang_common
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/system-probe_arm64:$DATADOG_AGENT_SYSPROBE_BUILDIMAGES
  tags: ["runner:docker-arm", "platform:arm64"]
  variables:
    ARCH: arm64

build_orjson_x64:
  rules:
    !reference [.manual]
  stage: deps_build
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/deb_x64
  tags: ["runner:main", "size:2xlarge"]
  variables:
    OPENSSL_VERSION: 1.1.1e
    PYTHON_VERSION: 3.8.10
    PYTHON_ABI: cp38
    ORJSON_VERSION: 3.5.3
    MATURIN_VERSION: 0.11.0-beta.3 # unreleaseed 0.11 adds support for manylinux1 wheels
    RUST_TOOLCHAIN: nightly-2021-05-25 # keep in sync with https://github.com/ijl/orjson/blob/3.5.3/ci/azure-pipelines.yml
    PACKAGE_TAGS: manylinux_2_5_x86_64.manylinux1_x86_64
    CURL_CMD: curl --proto =https -sSfL
  script:
    - echo -e "\e[0Ksection_start:`date +%s`:openssl[collapsed=true]\r\e[0Kopenssl"
    - $CURL_CMD -o openssl-$OPENSSL_VERSION.tar.gz https://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz
    - tar xzf openssl-$OPENSSL_VERSION.tar.gz
    - (cd openssl-$OPENSSL_VERSION && ./config --prefix=/usr/local && make -j9 && make -j9 install)
    - ldconfig
    - echo -e "\e[0Ksection_end:`date +%s`:openssl\r\e[0K"

    - echo -e "\e[0Ksection_start:`date +%s`:python[collapsed=true]\r\e[0Kpython"
    - $CURL_CMD -o Python-$PYTHON_VERSION.tar.gz https://www.python.org/ftp/python/$PYTHON_VERSION/Python-$PYTHON_VERSION.tgz
    - tar xzf Python-$PYTHON_VERSION.tar.gz
    - (cd Python-$PYTHON_VERSION && ./configure --prefix=$HOME/py && make -j9 && make -j9 install)
    - $HOME/py/bin/pip3 install --upgrade maturin==$MATURIN_VERSION twine auditwheel
    - echo -e "\e[0Ksection_end:`date +%s`:python\r\e[0K"

    - echo -e "\e[0Ksection_start:`date +%s`:rust[collapsed=true]\r\e[0Krust"
    - $CURL_CMD https://sh.rustup.rs | sh -s -- --default-toolchain $RUST_TOOLCHAIN --profile minimal -y
    - echo -e "\e[0Ksection_end:`date +%s`:rust\r\e[0K"

    - echo -e "\e[0Ksection_start:`date +%s`:orjson\r\e[0Korjson"
    - $CURL_CMD -o orjson-$ORJSON_VERSION.tar.gz https://github.com/ijl/orjson/archive/refs/tags/$ORJSON_VERSION.tar.gz
    - tar xzf orjson-$ORJSON_VERSION.tar.gz
    - (cd orjson-$ORJSON_VERSION && PATH="$HOME/.cargo/bin:$PATH" $HOME/py/bin/maturin build --no-sdist --release --strip --manylinux 1 --interpreter $HOME/py/bin/python3 --target x86_64-unknown-linux-gnu)
    - echo -e "\e[0Ksection_end:`date +%s`:orjson\r\e[0K"

    - echo $S3_CP_CMD orjson-$ORJSON_VERSION/target/wheels/orjson-$ORJSON_VERSION-$PYTHON_ABI-$PYTHON_ABI-$PACKAGE_TAGS.whl $S3_PERMANENT_ARTIFACTS_URI/
